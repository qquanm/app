<?xml version="1.0" encoding="UTF-8"?>
<!-- Spring配置文件 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>

	<context:property-placeholder location="classpath:jdbc.properties"
		ignore-unresolvable="true" />

	<!-- 导入相应的XML配置文件 -->
	<import resource="classpath:applicationContext-core.xml" />
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.qu">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="txManager"
		proxy-target-class="true" />

	<!-- application 注入 -->
	<!-- <bean id="applicationContextHelper" class="com.netease.module.spring.SpringContextHolder"
		lazy-init="false" /> -->

	<!-- REDIS配置 -->
	<!-- 基本的连结配置信息 -->
	<!-- <bean id="connection" class="com.netease.flight.cache.redis.Connection">
		密码写在此处，表示没办法，密码中含有特殊字符,低版本Spring解析不了
		<property name="password" value="${redis.password}" />
		<property name="timeout" value="${redis.timeout}" />
	</bean> -->

	<!-- 连结池的配置 -->
	<!-- <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${pool.redis.maxTotal}" />
		<property name="minIdle" value="${pool.redis.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${pool.redis.timeBetweenEvictionRunsMillis}" />
		<property name="maxWaitMillis" value="${pool.redis.maxWaitMillis}" />
		<property name="testOnBorrow" value="${pool.redis.testOnBorrow}"></property>
		<property name="testOnReturn" value="${pool.redis.testOnReturn}"></property>
	</bean> -->

	<!-- 监控池配置 -->
	<!-- <bean id="sentinelPool" class="com.netease.flight.cache.redis.JedisSentinelPool">
		<constructor-arg name="sentinelHosts" value="${redis.sentinels}" />
		<constructor-arg name="masterName" value="${redis.masterName}" />
		<constructor-arg name="masterConnectionInfo" ref="connection" />
		<constructor-arg name="masterPoolConfig" ref="poolConfig" />
	</bean> -->

	<!-- JedisTemplate操作模板 -->
	<!-- <bean id="jedisTemplate" class="com.netease.flight.cache.redis.JedisTemplate">
		<constructor-arg ref="sentinelPool" />
	</bean> -->
	<!-- REDIS配置结束 -->
	
	<!-- <context:component-scan base-package="com.netease.cron" /> -->
</beans>